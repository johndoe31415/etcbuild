#!/usr/bin/python3
#	etcbuild - Embedded Toolchain build scripts
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of etcbuild.
#
#	etcbuild is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	etcbuild is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with etcbuild; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import json
import re
import contextlib
import subprocess
import multiprocessing
from FriendlyArgumentParser import FriendlyArgumentParser
from PackageManager import PackageManager
from BuilderFactory import BuilderFactory

parser = FriendlyArgumentParser(description = "Embedded toolchain build script.")
parser.add_argument("-e", "--envfile", metavar = "filename", action = "append", default = [ ], help = "Specifies an environment file; can be specified multiple times (order matters, later options supersede previous ones). Set of JSON files which define build environment parameters such as the target or installation directory.")
parser.add_argument("-p", "--packages", metavar = "filename", default = "packages.json", help = "Specifies package configuration file. Defaults to %(default)s.")
parser.add_argument("-d", "--package-dir", metavar = "dirname", default = "packages", help = "Specifies subdirectory in which to store downloaded package sources. Defaults to %(default)s.")
parser.add_argument("--concurrency", metavar = "processes", type = int, default = multiprocessing.cpu_count(), help = "Specifies number of concurrent processes to use. Defaults to number of CPUs in the system (%(default)d on this machine).")
parser.add_argument("--disable-verification", action = "store_true", help = "Disables verification of hashes of downloaded files. Not recommended.")
parser.add_argument("--no-cleanup", action = "store_true", help = "By default, temporary files during the build process are removed after the build is finished. This option keeps them around.")
parser.add_argument("--no-install", action = "store_true", help = "Just build the packages, but do not install them.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("target", metavar = "target", type = str, nargs = "*", help = "Target(s) to build. Can be omitted if the enviroment contains a 'default-targets' list.")
args = parser.parse_args(sys.argv[1:])

class Builder():
	_SUBSITUTION_RE = re.compile("{{(?P<name>[-0-9a-zA-Z]+)}}")
	_TARGET_NAME_RE = re.compile("(?P<pkgname>[a-zA-Z0-9]+)(-(?P<version>[.a-zA-Z0-9]+))?(/(?P<flags>[,a-zA-Z]+))?")

	def __init__(self, args):
		self._args = args
		self._environment = self._get_environment()
		if "prefix" not in self._environment:
			self._environment["prefix"] = "/usr/local"
		self._pkgs = PackageManager(package_definition_filename = self._args.packages, package_directory = self._args.package_dir)
		self._environment["prefix"] = os.path.realpath(os.path.expanduser(self._environment["prefix"]))
		with contextlib.suppress(FileExistsError):
			os.makedirs(self._environment["prefix"])
		if args.verbose >= 2:
			print("Environment: %s" % (self._environment))
		self._subprocess_env = dict(os.environ)
		self._subprocess_env["PATH"] = self._environment["prefix"] + "/bin:" + self._subprocess_env["PATH"]
		self._subprocess_env["LD_LIBRARY_DIR"] = self._environment["prefix"] + "/lib"
		self._builder_factory = BuilderFactory(environment = self._environment, subprocess_environment = self._subprocess_env, automatic_cleanup = not self._args.no_cleanup, concurrent_processes = self._args.concurrency)

	def _get_environment(self):
		environment = { }
		for envfile in args.envfile:
			with open(envfile) as f:
				new_env = json.load(f)
			environment.update(new_env)

		def _replacer(match):
			match = match.groupdict()
			return environment[match["name"]]

		for i in range(100):
			new_environment = { }
			substituted = False

			for (key, value) in environment.items():
				if isinstance(value, str):
					new_value = self._SUBSITUTION_RE.sub(_replacer, value)
					new_environment[key] = new_value
					if new_value != value:
						substituted = True
				else:
					new_environment[key] = value
			if not substituted:
				break
			environment = new_environment
		else:
			raise Exception("Probably recursive environment variables, giving up after too deep recursion.")
		return environment

	def build_target(self, target_name):
		match = self._TARGET_NAME_RE.fullmatch(target_name)
		if match is None:
			raise Exception("Invalid target name: %s" % (target_name))
		match = match.groupdict()

		pkg = self._pkgs.get(match["pkgname"], version = match["version"])
		flags = set() if (match["flags"] is None) else set(match["flags"].split(","))

		print("Downloading: %s-%s" % (pkg["pkgname"], pkg["version"]))
		self._pkgs.retrieve(pkg, verify = self._args.disable_verification)
		with self._builder_factory.get_builder(pkg, flags) as builder:
			print("Unpacking: %s-%s to %s" % (pkg["pkgname"], pkg["version"], builder.builddir))
			builder.unpack()
			print("Building: %s-%s" % (pkg["pkgname"], pkg["version"]))
			builder.build()
			if not self._args.no_install:
				print("Installing: %s-%s" % (pkg["pkgname"], pkg["version"]))
				builder.install()

	def run(self):
		if len(self._args.target) == 0:
			if "default-targets" not in self._environment:
				raise Exception("Error: no targets specified on command line and environment does not contain 'default-targets' list.")
			targets = self._environment["default-targets"]
		else:
			targets = self._args.target

		for target_name in targets:
			self.build_target(target_name)

builder = Builder(args)
builder.run()
